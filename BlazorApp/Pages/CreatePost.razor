@page "/Create_Post"
@using global::Shared.DTOs
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@inject IUserService userService
@inject IPostService postService
@inject NavigationManager navMgr




<div class="card">
    <h3>Create Post</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="postTitle"/>
        </div>
        <div class="form-group field">
            <label>Body:</label>
            <input type="text" @bind="body"/>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    
</div>

@code {
    private string postTitle = "";
    private string body = "";
    private string msg = "";
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;

            userClaims = user.Claims;
            name = user.Identity!.Name!;
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        
        if (string.IsNullOrEmpty(body))
        {
            msg = "Body cannot be empty!";
            return;
        }

        try
        {
           
            
            

            CreatePostDTO dto = new(name, postTitle,body);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

   
}