@page "/My_Posts"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService

<AuthorizeView>
    <NotAuthorized>
        <h3>My Posts</h3>

        <p>You must be logged in to see your posts</p>
    </NotAuthorized>
    
    <Authorized>
        <div class="filter-bar">
            <div class="filters-container">
                <img src="img/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
                @if (doShowFilters)
                {
                    <div class="filter">
                        <label>Username:</label>
                        <input type="text" @bind="usernameFilter"/>
                    </div>
                    <div class="filter">
                        <label>Post id:</label>
                        <input type="number" @bind="postIdFilter"/>
                    </div>
                }
            </div>
        </div>
        
        <div>
            <button style="background-color: #ffa500" @onclick="OnInitializedAsync">Load</button>
        </div>

        @if (posts == null)
        {
        }
        else if (!posts.Any())
        {
            <p>No Posts to display</p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Post ID</th>
                    <th>Owner</th>
                    <th>Title</th>
                    <th>Body</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in posts)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Owner.Username</td>
                        <td>@item.Title</td>
                        <td>@item.Body</td>
                    </tr>
                }
                </tbody>
            </table>
        }
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }

    </Authorized>
</AuthorizeView>

@code {

    private IEnumerable<Post>? posts;
    private string msg = "";
    private bool doShowFilters = false;

   
    private string? usernameFilter;
    private int? postIdFilter;
   
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            
            posts = await postService.GetAsync(usernameFilter, postIdFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
}